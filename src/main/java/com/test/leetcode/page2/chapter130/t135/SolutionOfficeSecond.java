package com.test.leetcode.page2.chapter130.t135;

/**
 * @program: leetcode
 * @description:
 * @author: qinfajia
 * @create: 2021-07-21 19:52
 */
public class SolutionOfficeSecond {

    /**
     * 这种解法的思路如下：
     * 每个同学有四种状态:
     * 1,处于升序中，则该孩子一定比左边的孩子多一颗糖.
     * 2,处于降序中，则该孩子一定比右边的孩子多一颗糖.
     * 3,处于波谷中的孩子，这个孩子肯定只会有一颗糖.
     * 4,处于波峰中的孩子，这个孩子的糖果要取两边最大的那个值.
     * 这个题的巧妙之处就是：处于降序中的孩子，初始也只发一颗糖，然后等他右边的孩子发一颗糖的时候，
     * 通过降序的长度给前面的降序长度个孩子再每人补发一颗糖……牛
     * <p>
     * <p>
     * <p>
     * 依据前面总结的规律，我们可以提出本题的解法。我们从左到右枚举每一个同学，记前一个同学分得的糖果数量为pre
     * 1,如果当前同学比上一个同学评分高，说明我们就在最近的递增序列中，直接分配给该同学 pre+1个糖果即可。
     * 2,否则我们就在一个递减序列中，我们直接分配给当前同学一个糖果，并把该同学所在的递减序列中所有的同学都再多分配一个糖果，
     * 以保证糖果数量还是满足条件。
     * 一,我们无需显式地额外分配糖果，只需要记录当前的递减序列长度，即可知道需要额外分配的糖果数量。
     * 二,同时注意当当前的递减序列长度和上一个递增序列等长时，需要把最近的递增序列的最后一个同学也并进递减序列中。
     *
     * @param ratings
     * @return
     */
    public int candy(int[] ratings) {
        int n = ratings.length;
        // 总共需要的糖果数
        int ret = 1;
        // 当前递减序列的长度dec,最近的递增序列的长度inc,和前一个同学分得的糖果数量pre
        int inc = 1, dec = 0, pre = 1;
        // 遍历数组。注意是从1开始的，而不是从0
        for (int i = 1; i < n; i++) {
            if (ratings[i] >= ratings[i - 1]) {
                // 如果当前位置小朋友的分数不低于上一个位置的小朋友分数
                dec = 0;
                // 如果得分相同，则赋值为1,否则在原来的值上+1
                pre = ratings[i] == ratings[i - 1] ? 1 : pre + 1;
                // 累计
                ret += pre;
                // 增长值
                // 这个地方牛逼啊，当前孩子处于升序中的长度，恰好等于给他发的糖果数
                inc = pre;
            } else {
                // 当前位置小朋友的分数低于上一个位置的小朋友分数
                // 处于逆序中
                dec++;
                if (dec == inc) {
                    dec++;
                }
                ret += dec;
                pre = 1;
            }
        }
        return ret;
    }
}
